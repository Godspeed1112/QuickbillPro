import * as FileSystem from "expo-file-system";
import * as MailComposer from "expo-mail-composer";
import AsyncStorage from "@react-native-async-storage/async-storage";

// Helper function to load all company information
const loadCompanyInfo = async () => {
  try {
    const [
      companyName,
      companyEmail,
      companyPhone,
      companyAddress,
      defaultTaxRate
    ] = await Promise.all([
      AsyncStorage.getItem("companyName"),
      AsyncStorage.getItem("companyEmail"),
      AsyncStorage.getItem("companyPhone"),
      AsyncStorage.getItem("companyAddress"),
      AsyncStorage.getItem("defaultTaxRate")
    ]);

    // Also load from app settings if they exist there
    const appSettingsJson = await AsyncStorage.getItem("@app_settings");
    const appSettings = appSettingsJson ? JSON.parse(appSettingsJson) : {};

    return {
      companyName: companyName || appSettings.companyName || "Digital Dive",
      companyEmail: companyEmail || appSettings.companyEmail || "",
      companyPhone: companyPhone || appSettings.companyPhone || "",
      companyAddress: companyAddress || appSettings.companyAddress || "",
      defaultTaxRate: defaultTaxRate || appSettings.defaultTaxRate || "10"
    };
  } catch (error) {
    console.error("Error loading company information:", error);
    return {
      companyName: "Digital Dive",
      companyEmail: "",
      companyPhone: "",
      companyAddress: "",
      defaultTaxRate: "10"
    };
  }
};

// Function to handle existing PDF file
const handleSendPdfInvoice = async (
  customerEmail: string | null,
  pdfFilePath: string,
  invoiceNumber?: string
) => {
  try {
    console.log("üìß Starting PDF invoice send process...");
    console.log("Customer Email:", customerEmail);
    console.log("PDF File Path:", pdfFilePath);

    // 1. Load ALL company information
    const companyInfo = await loadCompanyInfo();
    console.log("üìã Company Info Loaded:", {
      name: companyInfo.companyName,
      email: companyInfo.companyEmail,
      hasPhone: !!companyInfo.companyPhone,
      hasAddress: !!companyInfo.companyAddress
    });

    if (!companyInfo.companyEmail) {
      console.warn("‚ùå Company email is not set in settings.");
      return {
        success: false,
        error: "Company email not configured. Please update your settings."
      };
    }

    // 2. Validate PDF file exists
    if (!pdfFilePath) {
      console.warn("‚ùå PDF file path is missing.");
      return {
        success: false,
        error: "PDF file path is required"
      };
    }

    // Check if file exists
    const fileInfo = await FileSystem.getInfoAsync(pdfFilePath);
    if (!fileInfo.exists) {
      console.warn("‚ùå PDF file does not exist at:", pdfFilePath);
      return {
        success: false,
        error: "PDF file not found at specified path"
      };
    }

    console.log("üìÑ PDF file found, size:", fileInfo.size, "bytes");

    // 3. Copy PDF to a new location with better filename (optional)
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const invoiceNum = invoiceNumber || `INV-${Date.now()}`;
    const newFileName = `invoice_${invoiceNum}_${timestamp}.pdf`;
    const newFileUri = FileSystem.documentDirectory + newFileName;
    
    // Copy the existing PDF to new location
    await FileSystem.copyAsync({
      from: pdfFilePath,
      to: newFileUri
    });

    console.log("üíæ PDF copied to:", newFileUri);

    // 4. Build recipients logic
    const recipients = customerEmail ? [customerEmail] : [companyInfo.companyEmail];
    const ccRecipients = customerEmail ? [companyInfo.companyEmail] : [];

    console.log("üì¨ Email Recipients:", {
      to: recipients,
      cc: ccRecipients
    });

    // 5. Enhanced email subject and body
    const emailSubject = `Invoice ${invoiceNum} from ${companyInfo.companyName}`;
    const emailBody = `
Dear ${customerEmail ? 'Valued Customer' : 'Team'},

Thank you for your business! Please find your invoice attached.

Invoice Details:
- Invoice Number: ${invoiceNum}
- Date: ${new Date().toLocaleDateString()}

If you have any questions about this invoice, please don't hesitate to contact us.

Best regards,
${companyInfo.companyName}
${companyInfo.companyPhone ? `Phone: ${companyInfo.companyPhone}` : ''}
${companyInfo.companyEmail ? `Email: ${companyInfo.companyEmail}` : ''}
${companyInfo.companyAddress ? `Address: ${companyInfo.companyAddress}` : ''}

---
Generated by QuickBillPro on ${new Date().toLocaleDateString()}
    `;

    // 6. Open email client
    console.log("üì® Opening email client...");
    
    const result = await MailComposer.composeAsync({
      recipients,
      ccRecipients,
      subject: emailSubject,
      body: emailBody,
      attachments: [newFileUri], // Use the copied PDF
    });

    console.log("‚úÖ Email compose result:", result);

    return {
      success: true,
      originalPdfPath: pdfFilePath,
      attachmentPath: newFileUri,
      companyInfo,
      emailResult: result
    };

  } catch (error) {
    console.error("‚ùå PDF invoice email failed:", error);
    return {
      success: false,
      error: error.message || "Unknown error occurred"
    };
  }
};

// Alternative function that uses the original PDF without copying
const handleSendPdfInvoiceSimple = async (
  customerEmail: string | null,
  pdfFilePath: string,
  invoiceNumber?: string
) => {
  try {
    console.log("üìß Starting simple PDF invoice send...");

    // 1. Load company information
    const companyInfo = await loadCompanyInfo();

    if (!companyInfo.companyEmail) {
      return {
        success: false,
        error: "Company email not configured"
      };
    }

    // 2. Validate PDF exists
    const fileInfo = await FileSystem.getInfoAsync(pdfFilePath);
    if (!fileInfo.exists) {
      return {
        success: false,
        error: "PDF file not found"
      };
    }

    // 3. Send email directly with existing PDF
    const recipients = customerEmail ? [customerEmail] : [companyInfo.companyEmail];
    const ccRecipients = customerEmail ? [companyInfo.companyEmail] : [];
    
    const invoiceNum = invoiceNumber || `INV-${Date.now()}`;
    const emailSubject = `Invoice ${invoiceNum} from ${companyInfo.companyName}`;
    
    const result = await MailComposer.composeAsync({
      recipients,
      ccRecipients,
      subject: emailSubject,
      body: `Dear Customer,\n\nPlease find your invoice attached.\n\nBest regards,\n${companyInfo.companyName}`,
      attachments: [pdfFilePath], // Use original PDF directly
    });

    return {
      success: true,
      pdfPath: pdfFilePath,
      emailResult: result
    };

  } catch (error) {
    console.error("‚ùå Simple PDF send failed:", error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Function to save PDF invoice record
const savePdfInvoiceRecord = async (pdfFilePath, customerEmail, companyInfo, invoiceNumber) => {
  try {
    const invoiceRecord = {
      customerEmail,
      companyInfo,
      pdfFilePath,
      invoiceNumber: invoiceNumber || `INV-${Date.now()}`,
      createdAt: new Date().toISOString(),
      status: 'sent',
      type: 'pdf'
    };

    const existingInvoicesJson = await AsyncStorage.getItem("savedInvoices");
    const existingInvoices = existingInvoicesJson ? JSON.parse(existingInvoicesJson) : [];

    existingInvoices.push(invoiceRecord);

    // Keep only last 50 invoices
    if (existingInvoices.length > 50) {
      existingInvoices.splice(0, existingInvoices.length - 50);
    }

    await AsyncStorage.setItem("savedInvoices", JSON.stringify(existingInvoices));

    console.log("üíæ PDF invoice record saved");
    return { success: true };
  } catch (error) {
    console.error("Failed to save PDF invoice record:", error);
    return { success: false, error: error.message };
  }
};

// Function to find saved PDF invoices
const findSavedPdfs = async () => {
  try {
    // List all files in the document directory
    const documentsDir = FileSystem.documentDirectory;
    const files = await FileSystem.readDirectoryAsync(documentsDir);
    
    // Filter for PDF files
    const pdfFiles = files.filter(file => file.toLowerCase().endsWith('.pdf'));
    
    const pdfInfo = await Promise.all(
      pdfFiles.map(async (filename) => {
        const filepath = documentsDir + filename;
        const fileInfo = await FileSystem.getInfoAsync(filepath);
        return {
          filename,
          filepath,
          size: fileInfo.size,
          modificationTime: fileInfo.modificationTime
        };
      })
    );

    console.log(`üìÅ Found ${pdfFiles.length} PDF files`);
    return pdfInfo;
  } catch (error) {
    console.error("Error finding PDF files:", error);
    return [];
  }
};

export {
  handleSendPdfInvoice,
  handleSendPdfInvoiceSimple,
  loadCompanyInfo,
  savePdfInvoiceRecord,
  findSavedPdfs
};

export default handleSendPdfInvoice;